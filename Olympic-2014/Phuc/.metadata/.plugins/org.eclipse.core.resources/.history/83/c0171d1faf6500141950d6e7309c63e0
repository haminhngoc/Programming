import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.InputMismatchException;

import javax.print.attribute.standard.Finishings;

class UnionSet {
	int[] pset;
	long[] value;

	public UnionSet(int n) {
		pset = new int[n];

		for (int i = 0; i < n; ++i) {
			pset[i] = i;
		}

	}

	int findSet(int i) {
		if (pset[i] == i) {
			return i;
		}
		int p = findSet(pset[i]);
		value[i] += value[pset[i]];
		return pset[i] = p;
	}

	void unionSet(int i, int j, long w) {
		int pi = findSet(i);
		int pj = findSet(j);
		long e = value[i];
		long f = value[j];
		value[pi] = w - e + f;
		pset[pi] = pj;

	}

	boolean isSameSet(int p1, int p2) {
		return findSet(p1) == findSet(p2);
	}
}

public class Main {

	public static void main(String[] args) {
		int n = nextInt();
		StringBuilder str = new StringBuilder();
		int m = nextInt();
		while (n + m > 0) {
			UnionSet set = new UnionSet(n + 1);
			for (int i = 0; i < m; ++i) {
				if (nextChar() == '!') {
					int a = nextInt();
					int b = nextInt();
					int w = nextInt();
					if (!set.isSameSet(a, b)) {
						set.unionSet(a, b, w);
					}
				} else {
					int a = nextInt();
					int b = nextInt();
					if (set.isSameSet(a, b)) {
						int  p = set.findSet(a);
					}
				}
			}
		}

	}

	public static InputStream in = System.in;
	public static byte[] bytes = new byte[1024];
	public static int lenbuf = 0;
	public static int ptrbuf = 0;

	public static int readByte() {

		if (lenbuf == -1) {
			throw new InputMismatchException();
		}
		if (ptrbuf >= lenbuf) {
			ptrbuf = 0;
			try {
				lenbuf = in.read(bytes);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				throw new InputMismatchException();
			}
			if (lenbuf <= 0) {
				return -1;
			}

		}

		return bytes[ptrbuf++];
	}

	public static boolean isSpace(int b) {
		return !(b >= 33 && b <= 126);
	}

	public static String nextString2() {
		StringBuilder str = new StringBuilder();

		int b = readByte();
		while (!isSpace(b) || b == ' ') {
			str.appendCodePoint(b);
			b = readByte();
		}

		return str.toString();
	}

	public static int read() {
		int b;
		while ((b = readByte()) != -1 && isSpace(b))
			;
		return b;
	}

	public static char nextChar() {
		return (char) read();
	}

	public static String nextString() {
		StringBuilder str = new StringBuilder();

		int b = read();
		while (!isSpace(b)) {
			str.appendCodePoint(b);
			b = readByte();
		}

		return str.toString();
	}

	public static int nextInt() {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() {
		return Long.parseLong(nextString());
	}

}
