import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Arrays;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;
import java.io.InputStream;

public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		NOIXICH solver = new NOIXICH();
		solver.solve(in, out);
		out.close();
	}
}




class UnionSet {
	public int[] pset;
	public long[] value;

	public UnionSet(int n) {
		pset = new int[n];

		for (int i = 0; i < n; ++i) {
			pset[i] = i;
		}
		value = new long[n];

	}

	int findSet(int i) {
		if (pset[i] == i) {
			return i;
		}
		int p = findSet(pset[i]);
		value[i] += value[pset[i]];
		return pset[i] = p;
	}

	void unionSet(int i, int j, long w) {
		int pi = findSet(i);
		int pj = findSet(j);
		long e = value[i];
		long f = value[j];
		value[pi] = w - e + f;
		pset[pi] = pj;

	}

	boolean isSameSet(int p1, int p2) {
		return findSet(p1) == findSet(p2);
	}
}

class Main {

	public static void main(String[] args) {
		int n = nextInt();
		StringBuilder str = new StringBuilder();
		int m = nextInt();

		while (n + m > 0) {
			UnionSet set = new UnionSet(n + 100);
			for (int i = 0; i < m; ++i) {
				if (nextChar() == '!') {
					int a = nextInt();
					int b = nextInt();
					int w = nextInt();
					if (!set.isSameSet(a, b)) {
						set.unionSet(a, b, w);
					}
				} else {
					int a = nextInt();
					int b = nextInt();
					if (set.isSameSet(a, b)) {
						long result = set.value[a] - set.value[b];
						str.append(result);
						str.append('\n');
					} else {
						str.append("UNKNOWN\n");
					}
				}
			}
			n = nextInt();
			m = nextInt();
		}
		System.out.println(str);

	}

class NOIXICH {
    public void solve(InputReader in, PrintWriter out) {
        int n = in.nextInt();
        Integer[] a = new Integer[n];
        for (int i = 0; i < n; i++) {
            a[i] = in.nextInt();
        }
        Arrays.sort(a);
        int i = 0;
        int t = n;
        int res = 0;
        while(i < --t){
            --a[i];
            if(a[i] == 0) ++i;
            ++res;
        }
        out.println(res);
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}

