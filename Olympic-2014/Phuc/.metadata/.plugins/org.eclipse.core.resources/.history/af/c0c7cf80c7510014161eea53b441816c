import java.io.InputStreamReader;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;
import java.io.InputStream;
import java.math.BigInteger;

/**
 * Built using CHelper plug-in Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		TaskC solver = new TaskC();
		solver.solve(1, in, out);
		out.close();
	}
}

class TaskC {
	int[][] board;
	int[][] safe;
	int[][] res;
	int r;
	int c;
	
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		r = in.nextInt();
		c = in.nextInt();
		board = new int[r][c];
		safe = new int[r][c];
		res = new int[r][c];
		Arrays.fill(res, -1);
		int t = in.nextInt();
		int g = in.nextInt();
		int x,y;
		for(int i = 0; i < t; ++i){
			x = in.nextInt();
			y = in.nextInt();
			board[x][y] = 1;
		}
		for(int i = 0; i < g; ++i){
			x = in.nextInt();
			y = in.nextInt();
			board[x][y] = 2;
		}
		safe[0][0] = dfs(0,0);
		
		
	}
	
	void find(int x, int y,int last){
		if(board[x][y] == 1 && board[x][y] == 2){
			return;
		}
		if(x == r-1 && y == c-1){
			res[x][y] = Math.min(last, res[x][y]);
			return;
		}
		res[x][y] = Math.min(res[x][y],last);
		
	}
	
	int dfs(int x, int y){
		if(board[x][y] == 1) return Integer.MAX_VALUE;
		if(board[x][y] == 2) return 0;
		int c1 = Integer.MAX_VALUE;
		if(x > 0){
			c1 = Math.min(c1, dfs(x-1,y));
		}
		if(x < r-1){
			c1 = Math.min(c1, dfs(x+1,y));
		}
		if(y > 0){
			c1 = Math.min(c1, dfs(x,y-1));
		}
		if(y < c-1){
			c1 = Math.min(c1, dfs(x,y+1));
		}
		return safe[x][y] = c1;
	}
}

class InputReader {
	public BufferedReader reader;
	public StringTokenizer tokenizer;

	public InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream), 32768);
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}
		return tokenizer.nextToken();
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

}