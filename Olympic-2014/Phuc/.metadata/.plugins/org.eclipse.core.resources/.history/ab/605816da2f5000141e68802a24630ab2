import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		Init(System.in);

		int n = nextInt();
		Room[] rooms = new Room[n];
		for (int i = 0; i < n; ++i) {
			rooms[i] = new Room();
			rooms[i].p = nextInt();
			rooms[i].k = nextInt();
		}

		Arrays.sort(rooms);

		int arr[] = new int[30001];
		int index = 0;
		for (int i = 0; i < n; ++i) {
			while (index < rooms[i].p) {
				index++;
			}

			if (arr[index] + rooms[i].k - rooms[i].k>arr[k]) {
arr[k] = arr[index] + rooms[i].k - rooms[i].k;
			}
		}
	}

	static BufferedReader reader;
	static StringTokenizer tokenizer;

	static void Init(InputStream input) {
		reader = new BufferedReader(new InputStreamReader(input));
		tokenizer = new StringTokenizer("");
	}

	static String next() throws IOException {
		while (!tokenizer.hasMoreTokens()) {
			tokenizer = new StringTokenizer(reader.readLine());
		}
		return tokenizer.nextToken();
	}

	static int nextInt() throws IOException {
		return Integer.parseInt(next());
	}

	static long nextLong() throws IOException {
		return Long.parseLong(next());
	}

	static Double NextDouble() throws IOException {
		return Double.parseDouble(next());
	}
}

class Room implements Comparable<Room> {
	public int p;
	public int k;

	@Override
	public int compareTo(Room a) {
		if (this.p < a.p) {
			return -1;
		} else if (this.p > a.p) {
			return 1;
		}
		return Integer.compare(this.k, a.k);
	}
}