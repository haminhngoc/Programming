
public class Main {

	public static void main(String[] args) {
		int n = nextInt();
		StringBuilder str = new StringBuilder();
		int m = nextInt();
 
		while (n + m > 0) {
			UnionSet set = new UnionSet(n + 1);
			for (int i = 0; i < m; ++i) {
				if (nextChar() == '!') {
					int a = nextInt();
					int b = nextInt();
					int w = nextInt();
					if (!set.isSameSet(a, b)) {
						set.unionSet(a, b, w);
					}
				} else {
					int a = nextInt();
					int b = nextInt();
					if (set.isSameSet(a, b)) {
						long result = set.value[a] - set.value[b];
						str.append(result);
						str.append('\n');
					} else {
						str.append("UNKNOWN\n");
					}
				}
			}
			n = nextInt();
			m = nextInt();
		}
		System.out.println(str);

	}

}class UnionSet {
	public int[] pset;
	public long[] value;
 
	public UnionSet(int n) {
		pset = new int[n];
 
		for (int i = 0; i < n; ++i) {
			pset[i] = i;
		}
		value = new long[n];
 
	}
 
	int findSet(int i) {
		if (pset[i] == i) {
			return i;
		}
		int p = findSet(pset[i]);
		value[i] += value[pset[i]];
		return pset[i] = p;
	}
 
	void unionSet(int i, int j, long w) {
		int pi = findSet(i);
		int pj = findSet(j);
		long e = value[i];
		long f = value[j];
		value[pi] = w - e + f;
		pset[pi] = pj;
 
	}
 
	boolean isSameSet(int p1, int p2) {
		return findSet(p1) == findSet(p2);
	}
}
 
