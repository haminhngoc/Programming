import java.io.IOException;
import java.io.InputStream;
import java.util.InputMismatchException;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		 Scanner in = new Scanner(System.in);
		int t = nextInt();
		
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = 1; i <= t; ++i) {
			stringBuilder.append(i);
			stringBuilder.append(' ');
			stringBuilder.append(solve(in));
			stringBuilder.append('\n');
		}

		System.out.print(stringBuilder);
	}

	private static long solve(Scanner in) {
		char[] s = in.next("[]").toCharArray();
		int max = 0;
		int current = 0;

		int l = s.length;
		for (int i = 0; i < l; ++i) {
			if (s[i] == '[') {
				current++;
				if (current > max) {
					max = current;
				}
			} else {
				current--;
			}
		}

		return pow(max);
	}

	private static long pow(int max) {
		if (max == 1) {
			return 2;
		}
		if (max == 0) {
			return 1;
		}
		long v = pow(max / 2);
		long r = v * v;
		if ((max & 2) == 1) {
			r = r << 1;
		}

		return r;
	}

	public static InputStream in = System.in;
	public static byte[] bytes = new byte[1024];
	public static int lenbuf = 0;
	public static int ptrbuf = 0;

	public static int readByte() {

		if (lenbuf == -1) {
			throw new InputMismatchException();
		}
		if (ptrbuf >= lenbuf) {
			ptrbuf = 0;
			try {
				lenbuf = in.read(bytes);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				throw new InputMismatchException();
			}
			if (lenbuf <= 0) {
				return -1;
			}

		}

		return bytes[ptrbuf++];
	}

	public static boolean isSpace(int b) {
		return !(b >= 33 && b <= 126);
	}

	public static int read() {
		int b;
		while ((b = readByte()) != -1 && isSpace(b))
			;
		return b;
	}

	public static char nextChar() {
		return (char) read();
	}

	public static String nextString2() {
		StringBuilder str = new StringBuilder();

		int b;// = read();
		while ((b = readByte()) != -1 && b != '\n' && b != '[' && b != ']')
			;
		while (!isSpace(b)) {
			str.appendCodePoint(b);
			b = readByte();
		}

		return str.toString();
	}

	public static String nextString() {
		StringBuilder str = new StringBuilder();

		int b = read();

		;
		while (!isSpace(b)) {
			str.appendCodePoint(b);
			b = readByte();
		}

		for (; ptrbuf < lenbuf; ++ptrbuf) {
			if (b == '\n') {
				ptrbuf++;
				break;
			}
		}
		return str.toString();
	}

	public static int nextInt() {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() {
		return Long.parseLong(nextString());
	}

}
