import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		Init(System.in);

		int n = nextInt();
		PriorityQueue<Pair> q = new PriorityQueue<Pair>();
		long sum = 0;
		long count = n;
		long arr[] = new long[n];
		int size = 0;
		long temp;
		for (int i = 0; i < n; ++i) {
			temp = nextLong();
			if (temp <= 0) {
				count--;
				while (size > 0 && sum + temp - q.peek().value <= 0) {
					q.poll();
					count--;
					size--;
				}
			} else {
				Pair p = new Pair();
				p.position = i;
				p.value = sum;
				q.add(p);
				size++;
			}

			sum += temp;
			arr[i] = sum;
		}
		for (int i = 1; i < n; ++i) {
			while (size > 0) {
				Pair p = q.peek();
				if (p.position < i) {
					q.poll();
					size--;
					continue;
				}
				if (sum - p.value + arr[i - 1] <= 0) {
					q.poll();
					size--;
					count--;
				} else {
					break;
				}
			}
		}
		System.out.println(count);
	}

	static BufferedReader reader;
	static StringTokenizer tokenizer;

	static void Init(InputStream input) {
		reader = new BufferedReader(new InputStreamReader(input));
		tokenizer = new StringTokenizer("");
	}

	5
	0 1 -2 10 3
}

class Pair implements Comparable<Pair> {
	int position;
	long value;

	@Override
	public int compareTo(Pair arg0) {
		return this.value < arg0.value ? 1 : (this.value > arg0.value ? -1 : 0);
	}
}
