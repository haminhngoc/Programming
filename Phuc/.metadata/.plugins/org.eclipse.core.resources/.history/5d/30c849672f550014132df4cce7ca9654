import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.List;

public class Main {

	public static void main(String[] args) {
		long n = nextInt();

		// System.out.println(n);
		List<Integer> list = generatePrimeList(2 * (int) n);

		long arr[] = new long[(int) (2 * n + 1)];
		int index = 0;
		int size = list.size();
		for (int j = 1; j < 2 * n; ++j) {
			arr[j] = arr[j - 1];
			if (index < size && list.get(index) == j) {
				index++;
				arr[j]++;
			}
		}

		long result = 0;

		for (int i = 1; i <= n; ++i) {
			long t = size - (2 * i <= n ? arr[2 * i] : size);
			long z = (2 * i - 1 <= n ? arr[2 * i - 1] : size) - arr[i];

			result += t * (t - 1) / 2;
			result += z * (z - 1) / 2;
			result += t * z;
		}

		for (int i = 1; i < size; ++i) {
			result -= list.get(i) / 2 * (n - 2);
		}
		result += n * (n - 1) * (n - 2) / 6;

		System.out.println(result);
	}

	private static List<Integer> generatePrimeList(int n) {
		List<Integer> list = new ArrayList<Integer>();
		list.add(2);
		list.add(3);
		int size = 2;
		for (int i = 5; i <= n; ++i) {
			int end = (int) Math.sqrt(i);
			int j;
			for (j = 0; j < size; ++j) {
				if (i % list.get(j) == 0 || list.get(j) > end) {
					break;
				}
			}

			if (j < size && i % list.get(j) == 0) {
				continue;
			} else {
				list.add(i);
				size++;
			}
		}
		return list;
	}

	static InputStream in = System.in;
	static byte[] stream = new byte[1024];
	static int lenbuf = 0;
	static int prtbuf = 0;

	static int readByte() {
		if (lenbuf == -1) {
			throw new InputMismatchException();
		}
		if (prtbuf >= lenbuf) {
			prtbuf = 0;
			try {
				lenbuf = in.read(stream);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (lenbuf <= 0) {
				return -1;
			}
		}
		return stream[prtbuf++];
	}

	static boolean isSpace(int c) {
		return !(c >= 33 && c <= 126);
	}

	static int read() {
		int b;
		while ((b = readByte()) != -1 && isSpace(b))
			;

		return b;
	}

	static private double nextDouble() {
		return Double.parseDouble(nextString());
	}

	private static String nextString() {
		int b = read();
		StringBuilder sb = new StringBuilder();
		while (!isSpace(b)) {
			sb.appendCodePoint(b);
			b = readByte();
		}
		return sb.toString();
	}

	private static int nextInt() {
		int num = 0;
		int b;
		boolean minus = false;
		while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) {

		}
		if (b == '-') {
			minus = true;
			b = readByte();
		}
		while (true) {
			if (b >= '0' && b <= '9') {
				num = num * 10 + (b - '0');
			} else {
				return minus ? -num : num;

			}
			b = readByte();
		}

	}

	static private char nextChar() {
		return (char) read();
	}
}
