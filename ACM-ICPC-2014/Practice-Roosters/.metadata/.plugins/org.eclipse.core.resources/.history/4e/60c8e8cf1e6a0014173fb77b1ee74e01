import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

class Main {

	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Task solver = new Task();
		solver.solve(in, out);
		out.close();
	}

}

class Task {
	public void solve(InputReader in, PrintWriter out) {
		int t = in.nextInt();
		for (int id = 1; id <= t; id++) {
			int n = in.nextInt();
			int m = in.nextInt();
			int start = in.nextInt();

			List<Integer>[] graph = new List[n + 1];
			for (int i = 0; i < n; i++) {
				graph[i] = new ArrayList<Integer>();
			}

			boolean[] visited = new boolean[n + 1];
			int[] ws = new int[m];
			
			for (int i = 0; i < m; i++) {
				int x = in.nextInt();
				int y = in.nextInt();
				int w = in.nextInt();
				a[i][0] = x;
				a[i][1] = y;
				a[i][2] = w;
				graph[x].add(y);
			}
			
			
			Queue<Integer> q = new LinkedList<>();
			q.add(start);
			int cur;
			while (!q.isEmpty()) {
				cur = q.poll();
				for (int v : graph[cur]) {
					if (!visited[v])
						q.add(v);
				}
			}

		}
	}
}

class InputReader {
	BufferedReader reader;
	StringTokenizer tokenizer;

	InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream), 32768);
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return tokenizer.nextToken();
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public long nextLong() {
		return Long.parseLong(next());
	}
}