import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.StringTokenizer;

class Main {

	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Task solver = new Task();
		solver.solve(in, out);
		out.close();
	}
}

class Task {
	static int n;
	static int m;
	static InputReader in;
	String[][] s;
	static int u[];
	long count;

	public void solve(InputReader in, PrintWriter out) throws IOException {
		this.in = in;
		int k = in.nextInt();
		for (int i = 0; i < k; ++i) {
			solve();
		}
	}

	private void solve() throws IOException {
		count = 0;
		n = in.nextInt();
		m = in.nextInt();
		String[][] s = new String[m][];
		u = new int[n + 1];
		u[1] = 1;
		in.reader.readLine();
		for (int i = 0; i < m; ++i) {
			s[i] = in.reader.readLine().split(" ");
		}

		dfs(2);

	}

	private void dfs(int i) {
		u[i] = 0;
		if (i == n) {
			check();
		} else {
			dfs(i + 1);
		}

		u[i] = 1;
		if (i == n) {
			check();
		} else {
			dfs(i + 1);
		}

	}

	private void check() {
		for (int i = 0; i < m; ++i) {
			int l = s[i].length;
			int sum = 0;
			for (int j = 0; j < n; ++j) {
				sum += u[Integer.parseInt(s[i][j])];
			}
			if (sum > 0 && sum < n) {

			}
		}

	}
}

class InputReader {
	public BufferedReader reader;
	StringTokenizer tokenizer;

	InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream), 32768);
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return tokenizer.nextToken();
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public long nextLong() {
		return Long.parseLong(next());
	}
}