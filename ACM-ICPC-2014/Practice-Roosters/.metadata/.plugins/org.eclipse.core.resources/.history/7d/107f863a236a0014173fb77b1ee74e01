import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;

class Main {

	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Task solver = new Task();
		solver.solve(in, out);
		out.close();
	}

}

class Task {
	public void solve(InputReader in, PrintWriter out) {
		int t = in.nextInt();
		for (int id = 1; id <= t; id++) {
			int n = in.nextInt();
			int m = in.nextInt();
			int start = in.nextInt() - 1;

			List<Integer>[] graph = new List[n];
			for (int i = 0; i < n; i++) {
				graph[i] = new ArrayList<Integer>();
			}

			boolean[] visited = new boolean[n];
			Integer[] ws = new Integer[m];
			int[] xx = new int[m];
			int[] yy = new int[m];
			for (int i = 0; i < m; i++) {
				xx[i] = in.nextInt() - 1;
				yy[i] = in.nextInt() - 1;
				ws[i] = in.nextInt();
				graph[xx[i]].add(yy[i]);
				graph[yy[i]].add(xx[i]);
			}
			
			Arrays.sort(ws);
			int index = 0;
			int[][] res = new int[n][n];

			Queue<Integer> q = new LinkedList<>();
			q.add(start);
			int cur;
			while (!q.isEmpty()) {
				cur = q.poll();
				for (int v : graph[cur]) {
					if (!visited[v]) {
						res[cur][v] = ws[index];
						res[v][cur] = ws[index];
						++index;
						q.add(v);
						visited[v] = true;
					}
				}
			}
			out.printf("Case %d:\n", id);
			for(int i = 0; i < m; ++i){
				out.printf("%d %d %d\n", xx[i]+1,yy[i]+1,Math.max(res[xx[i]][yy[i]],res[yy[i]][xx[i]]));
			}
		}
	}
}

class Edge {
	int a;
	int b;
	int w;

	Edge(int a, int b, int w) {
		this.a = a;
		this.b = b;

	}
}

class InputReader {
	BufferedReader reader;
	StringTokenizer tokenizer;

	InputReader(InputStream stream) {
		reader = new BufferedReader(new InputStreamReader(stream), 32768);
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return tokenizer.nextToken();
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public long nextLong() {
		return Long.parseLong(next());
	}
}