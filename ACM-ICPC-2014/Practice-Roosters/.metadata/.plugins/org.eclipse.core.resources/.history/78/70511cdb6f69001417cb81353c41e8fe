import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;
import java.util.StringTokenizer;

class Main {

	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		PrintWriter out = new PrintWriter(outputStream);
		Task1 solver = new Task1();
		solver.solve(out);
		out.close();
	}
}

class Task1 {

	public void solve(PrintWriter out) {

		int n = nextInt();
		int r = nextInt();
		double[] p;
		int testCase = 1;
		while (n + r > 0) {
			p = new double[n];
			for (int i = 0; i < n; ++i) {
				p[i] = nextDouble();
			}
			Arrays.sort(p);
			System.out.print("Case "+testCase+": ");
			solve(p);
			n = nextInt();
			r = nextInt();
			testCase++;
		}
	}

	public long lowerBound(double[] a, double key) {
		int l = 0;
		int r = a.length - 1;
		while (l < r) {
			int m = (l + r + 1) >> 1;
			if (a[m] >= key) {
				r = m - 1;
			} else {
				l = m;
			}
		}
		return a[l] <= key ? l : l - 1;
	}

	public long upperBound(double[] a, double key) {
		int l = 0;
		int r = a.length - 1;
		while (l < r) {
			int m = (l + r) >> 1;
			if (a[m] < key) {
				l = m + 1;
			} else {
				r = m;
			}
		}
		return a[r] >= key ? r : r + 1;
	}

	private void solve(double[] p) {

		int l = p.length;
		long count = 0;
		for (int i = 0; i < l; ++i) {
			if (p[i] <= 180) {
				long lower = lowerBound(p, p[i] + 180);
				count -= (lower - i) * (lower - i - 1) / 2;
				int index = Arrays.binarySearch(p, p[i] + 180);
				if (index < 0) {
					long temp = l - (lower - i + 1);
					count -= (temp) * (temp - 1) / 2;
				} else {
					long temp = l - (lower - i + 2);
					count -= (temp) * (temp - 1) / 2;
				}
			} else {
				long uper = upperBound(p, p[i] - 180);
				count -= (i - uper) * (i - uper - 1) / 2;
				if (Arrays.binarySearch(p, p[i] - 180) < 0) {
					long temp = l - (i - uper + 1);
					count -= (temp) * (temp - 1) / 2;
				} else {
					long temp = l - (i - uper + 2);
					count -= (temp) * (temp - 1) / 2;
				}
			}
		}
		count /= 2;
		count += (l) * (l - 1) * (l - 2) / 6;

		System.out.println(count);

	}

	static InputStream in = System.in;
	static byte[] bytes = new byte[1000000];
	static int lenbuf = 0;
	static int ptrbuf = 0;

	static int readByte() {
		if (lenbuf == -1) {
			throw new InputMismatchException();
		}
		if (ptrbuf >= lenbuf) {
			try {
				lenbuf = in.read(bytes);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				throw new InputMismatchException();
			}
			ptrbuf = 0;
			if (lenbuf <= 0) {
				return -1;
			}
		}

		return bytes[ptrbuf++];
	}

	static boolean hasNext() {
		if (lenbuf == 0) {
			try {
				lenbuf = in.read(bytes);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				throw new InputMismatchException();
			}
		}
		for (; ptrbuf < lenbuf; ++ptrbuf) {
			if (!isSpace(bytes[ptrbuf])) {
				return true;
			}
		}
		return false;
	}

	static boolean isSpace(int c) {
		return !(c >= 33 && c <= 126);
	}

	static int read() {
		int b;
		while ((b = readByte()) != -1 && isSpace(b))
			;
		return b;
	}

	static String nextString() {
		int b;
		b = read();
		StringBuilder str = new StringBuilder();
		while (!isSpace(b)) {
			str.appendCodePoint(b);
			b = readByte();
		}
		return str.toString();
	}

	static int nextInt() {
		return Integer.parseInt(nextString());
	}

	static long nextLong() {
		return Long.parseLong(nextString());
	}

	static double nextDouble() {
		return Double.parseDouble(nextString());
	}
}
