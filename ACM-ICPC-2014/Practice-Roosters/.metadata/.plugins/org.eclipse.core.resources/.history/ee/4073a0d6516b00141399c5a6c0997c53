import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.StringTokenizer;

import javax.jws.Oneway;

class Main {

	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		Task solver = new Task();
		solver.solve(in, out);
		out.close();
	}
}

class Task {
	static InputReader in;

	public void solve(InputReader in, PrintWriter out) {
		this.in = in;
		int t = in.nextInt();
		for (int i = 1; i <= t; ++i) {
			System.out.print("Case " + i + ": ");
			solve();
		}
	}

	static int r;
	static int c;

	private void solve() {
		r = in.nextInt();
		c = in.nextInt();

		char[][] matrix = new char[r][];
		for (int i = 0; i < r; ++i) {
			matrix[i] = in.next().toCharArray();
		}

		int type = getType(matrix);

		if (type == 0) {
			System.out.println("impossible");
			return;
		}

		int[] oneInRows = new int[r];
		int[] oneInCols = new int[c];
		for (int i = 0; i < r; ++i) {
			for (int j = 0; j < c; ++j) {
				if (matrix[i][j] == '1') {
					oneInCols[j]++;
					oneInRows[i]++;
				}
			}
		}

		int nRSwap = 0;
		int nCSwap = 0;
		if (nOne % r == 0) {
			int avg = nOne / r;
			nRSwap = getNSwap(avg, oneInRows);
		}
		if (nOne % c == 0) {
			int avg = nOne / c;
			nRSwap = getNSwap(avg, oneInCols);
		}

		if (type == 2) {
			System.out.println("Both " + (nCSwap + nRSwap));
		} else {
			if (nCSwap > nRSwap) {
				System.out.println("column " + nCSwap);
			} else {
				System.out.println("row " + nRSwap);
			}
		}

	}

	private int getNSwap(int avg, int[] arr) {
		int n = arr.length;
		int out = 0;
		for (int i = 0; i < r; ++i) {
			if (arr[i] < avg)
				for (int j = i + 1; j < r; ++j) {
					if (arr[i] > avg) {
						int val = arr[j] - avg;
						arr[i] += val;
						arr[j] -= val;
						out += j - i;
					}
				}
		}
		return out;
	}

	static int nOne;

	private int getType(char[][] matrix) {
		nOne = 0;
		for (int i = 0; i < r; ++i) {
			for (int j = 0; j < c; ++j) {
				if (matrix[i][j] == '1')
					nOne++;
			}
		}

		if (nOne % r == 0 && nOne % c == 0)
			return 2;
		if (nOne % r == 0 || nOne % c == 0)
			return 1;
		return 0;
	}
}

class InputReader {
	BufferedReader reader;
	StringTokenizer tokenizer;

	public InputReader(InputStream inputStream) {
		reader = new BufferedReader(new InputStreamReader(inputStream), 32768);
		tokenizer = null;
	}

	public String next() {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			try {
				tokenizer = new StringTokenizer(reader.readLine());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return tokenizer.nextToken();
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public long nextLong() {
		return Long.parseLong(next());
	}

	public double nextDouble() {
		return Double.parseDouble(next());
	}
}
