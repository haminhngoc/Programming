import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;
import java.util.StringTokenizer;

class Main {

	public static void main(String[] args) {
		InputStream inputStream = System.in;
		OutputStream outputStream = System.out;
		PrintWriter out = new PrintWriter(outputStream);
		Task1 solver = new Task1();
		solver.solve(out);
		out.close();
	}

}

class Task1 {

	public void solve(PrintWriter out) {
		int n = nextInt();
		int id = 1;
		while (n != 0) {
			long[] x = new long[n];
			long[] y = new long[n];
			for (int i = 0; i < n; ++i) {
				x[i] = nextLong();
				y[i] = nextLong();
			}
			long ax = nextLong();
			long ay = nextLong();
			long bx = nextLong();
			long by = nextLong();

			Long[] disA = new Long[n];
			Long[] disB = new Long[n];

			for (int i = 0; i < n; ++i) {
				disA[i] = (x[i] - ax) * (x[i] - ax) + (y[i] - ay) * (y[i] - ay);
				disB[i] = (x[i] - bx) * (x[i] - bx) + (y[i] - by) * (y[i] - by);
			}

			Arrays.sort(disA);
			Arrays.sort(disB);
			int q = nextInt();
			StringBuilder res = new StringBuilder();
			res.append("Case " + id + ":\n");
			for (int i = 0; i < q; i++) {
				long R1 = nextLong();
				long R2 = nextLong();
				int both = 0;
				both += lowerBound(disA, R1);
				both += lowerBound(disB, R2);
				res.append(Math.max((n - (both + 2)), 0) + "\n");
			}
			System.out.print(res);
			id++;
			n = nextInt();
		}
	}

	private int lowerBound(Long[] disA, long r1) {
		int l = 0;
		int r = disA.length - 1;
		long key = r1 * r1;
		while (l < r) {
			int m = (l + r + 1) >> 1;
			if (disA[m] > key) {
				r = m - 1;
			} else {
				l = m;
			}
		}
		return disA[l] <= key ? l : l - 1;
	}

	private boolean check(char[] arrS, char[] arrP) {
		int s = arrS.length;
		int p = arrP.length;
		int i = 0;
		int j = 0;
		while (i < s && j < p) {
			while (i < s && arrS[i] != arrP[j]) {
				i++;
			}
			if (i >= s) {
				break;
			}
			i++;
			j++;
		}
		if (j >= p) {
			return true;
		}
		return false;
	}

	static InputStream in = System.in;
	static byte[] bytes = new byte[1000000];
	static int lenbuf = 0;
	static int ptrbuf = 0;

	static int readByte() {
		if (lenbuf == -1) {
			throw new InputMismatchException();
		}
		if (ptrbuf >= lenbuf) {
			try {
				lenbuf = in.read(bytes);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				throw new InputMismatchException();
			}
			ptrbuf = 0;
			if (lenbuf <= 0) {
				return -1;
			}
		}

		return bytes[ptrbuf++];
	}

	static boolean hasNext() {
		if (lenbuf == 0) {
			try {
				lenbuf = in.read(bytes);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				throw new InputMismatchException();
			}
		}
		for (; ptrbuf < lenbuf; ++ptrbuf) {
			if (!isSpace(bytes[ptrbuf])) {
				return true;
			}
		}
		return false;
	}

	static boolean isSpace(int c) {
		return !(c >= 33 && c <= 126);
	}

	static int read() {
		int b;
		while ((b = readByte()) != -1 && isSpace(b))
			;
		return b;
	}

	static String nextString() {
		int b;
		b = read();
		StringBuilder str = new StringBuilder();
		while (!isSpace(b)) {
			str.appendCodePoint(b);
			b = readByte();
		}
		return str.toString();
	}

	static int nextInt() {
		return Integer.parseInt(nextString());
	}

	static long nextLong() {
		return Long.parseLong(nextString());
	}
}
