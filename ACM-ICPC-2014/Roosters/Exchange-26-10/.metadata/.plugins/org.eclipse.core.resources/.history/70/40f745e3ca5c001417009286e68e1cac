import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Comparator;
import java.util.InputMismatchException;

class Main {
	public static int arr[];
	public static int temp[] = new int[1000];
	public static int maxPos;
	public static P[] p;

	public static void main(String[] args) {
		int n = nextInt();
		arr = new int[n];

		p = new P[n];
		for (int i = 0; i < n; ++i) {
			p[i] = new P();
			p[i].po = i;
			p[i].value = nextInt();
		}
		Arrays.sort(p, new Comparator<P>() {
			@Override
			public int compare(P p1, P p2) {
				return Integer.compare(p2.value, p1.value);
			}
		});

		maxPos = -1;
		long result = 0;

		for (int i = 0; i < n; ++i) {

			int g = i >> 9;
			result += find(maxPos, p[i].po, p[i].value);

			if (p[i].value > temp[g]) {
				temp[g] = arr[i];
				if (arr[maxPos] < temp[g]) {
					maxPos = i;
				}
			}
		}

		System.out.println(result);

	}

	private static long find(int maxPos, int i, int value) {
		int g = i >> 9;
		if (maxPos == -1) {
			maxPos = i;
			arr[i] = value;
			return p.length - 1;
		}
		if (value >= arr[maxPos]) {
			return p.length - 1;
		}
		long result;
		int l =0;
		int r =p.length;
		for (int j = g; true; ++j) {
			if (temp[j] > value) {
				for (int k = j << 9; k >> 9 == j; ++k) {
					if (arr[k] > value) {
						r = k;
						break;
					}
				}
				break;
			}
			if (j << 9 > p.length) {
				r = p.length;
				break;
			}
		}

		for (int j = g; true; --j) {
			if (temp[j] > value) {
				for (int k = j << 9 + 511; k >> 9 == j; --k) {
					if (arr[k] > value) {
						l = k;
						break;
					}
				}
				break;
			}
			if (i == 0) {
				l = 0;
				break;
			}
		}

		return r - l - 2;
	}

	public static InputStream in = System.in;
	public static byte[] bytes = new byte[1000000];
	public static int lenbuf = 0;
	public static int ptrbuf = 0;

	public static boolean hasNext() {

		if (lenbuf <= 0) {
			return false;
		}
		for (int i = ptrbuf; i < lenbuf; ++i) {
			if (!isSpace(bytes[i])) {
				return true;
			}
		}
		return false;
	}

	public static int readByte() {
		if (lenbuf == -1) {
			throw new InputMismatchException();
		}
		if (ptrbuf >= lenbuf) {
			ptrbuf = 0;
			try {
				lenbuf = in.read(bytes);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				throw new InputMismatchException();
			}
			if (lenbuf <= 0) {
				return -1;
			}

		}

		return bytes[ptrbuf++];
	}

	public static boolean isSpace(int b) {
		return !(b >= 33 && b <= 126);
	}

	public static int read() {
		int b;
		while ((b = readByte()) != -1 && isSpace(b))
			;
		return b;
	}

	public static char nextChar() {
		return (char) read();
	}

	public static String nextString() {
		StringBuilder str = new StringBuilder();

		int b = read();
		while (!isSpace(b)) {
			str.appendCodePoint(b);
			b = readByte();
		}

		return str.toString();
	}

	public static int nextInt() {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() {
		return Long.parseLong(nextString());
	}
}

class P {
	public int value;
	public int po;
}
